<%
	const formatDate = (date) => new Intl.DateTimeFormat().format(date);
	const formatDateString = (dateString) => formatDate(new Date(dateString));
%>

<li>
	<h2>
		<% if (version.name) { %>
			Version <%= version.name %>
		<% } else { %>
			Unnamed version
		<% } %>

		<% if (isFirst) { %>
			(Latest)
		<% } %>
	</h2>

	<% if (version.notices) { %>
		<% for (const notice of version.notices) { %>
			<%- include('notice', { notice }) %>
		<% } %>
	<% } %>

	<%
		const { duration } = version;

		const startDate = duration.start ? formatDateString(duration.start) : 'unknown';
		const endDate = duration.end ? formatDateString(duration.end) : 'unknown';
		const dateSpan = `${startDate} &ndash; ${endDate}`;
	%>
	<p><%- dateSpan %></p>

	<%# If we don't have start and end dates, fill in as many of the blanks as we can %>
	<% if (!(duration.start && duration.end)) { %>
		<%
			// Sort `on` dates chronologically
			const onDates = duration.on?.map((dateString) => new Date(dateString)).sort((a, b) => a - b);
		%>

		<%# If we have `on` dates, know the policy is ended, or the policy may be current %>
		<% if (onDates || duration.ended || !duration.end) { %>
			<p>
				<% if (onDates) { %>
					<%
						const firstDate = onDates[0];
						const lastDate = onDates[onDates.length-1];

						const showFirstDate = !duration.start;
						const showLastDate = !duration.end && (firstDate !== lastDate || !showFirstDate);
					%>
					Active on
						<% if (showFirstDate) { %>
							<%= formatDate(firstDate) %>
						<% } %>
						<% if (showFirstDate && showLastDate) { %>
							and
						<% } %>
						<% if (showLastDate) { %>
							<%= formatDate(lastDate) %>
						<% } %>
				<% } %>

				<% if (duration.ended) { %>
					(no longer active)
				<% } else if (!duration.end) { %>
					(no known end date)
				<% } %>
			</p>
		<% } %>
	<% } %>

	<%- include('file', { file: version.files[0] }) %>
</li>
