<%##
	locals: {
		directory: Record<string, Policy>,
		paths: {
			policies: string,
		},
	}
%>

<%
	const keys = Object.keys(directory).sort();
	const policies = [];
	for (const key of keys) {
		policies.push(directory[key]);
	}

	const sections = {
		'Needs OCR': (policy) => {
			for (const version of policy.versions) {
				for (const file of version.files) {
					let fileNeedsOCR = false;
					if (file.accessibility.features['text-based']?.value === false) {
						fileNeedsOCR = true;
					}

					if (fileNeedsOCR && file.alternateFiles) {
						for (const altFile of file.alternateFiles) {
							if (altFile.accessibility.features['text-based']?.value === true) {
								fileNeedsOCR = false;
							}
						}
					}

					if (fileNeedsOCR) {
						return true;
					}
				}
			}

			return false;
		},

		'Needs accessibility rating': (policy) => {
			for (const version of policy.versions) {
				for (const file of version.files) {
					if (file.accessibility.rating === 'Undetermined') {
						return true;
					}

					if (file.alternateFiles) {
						for (const altFile of file.alternateFiles) {
							if (altFile.accessibility.rating === 'Undetermined') {
								return true;
							}
						}
					}
				}
			}

			return false;
		},

		'Needs withholdings review': (policy) => {
			for (const version of policy.versions) {
				for (const provenance of version.provenance) {
					if (provenance.withholdings === 'Undetermined' || provenance.oiaRequest?.withholdings === 'Undetermined') {
						return true;
					}
				}

				for (const file of version.files) {
					if (file.provenance) {
						for (const provenance of file.provenance) {
							if (provenance.withholdings === 'Undetermined' || provenance.oiaRequest?.withholdings === 'Undetermined') {
								return true;
							}
						}
					}
				}
			}

			return false;
		},

		'Has undetermined type': (policy) => {
			if (policy.type === 'Undetermined') {
				return true;
			} else {
				return false;
			}
		},

		'May have secondary files': (policy) => {
			// Files with a startingPage that isn't 1, which are the only file, were likely released with an OIA response letter in the same file
			for (const version of policy.versions) {
				if (version.files.length === 1) {
					if ('startingPage' in version.files[0] && version.files[0].startingPage !== 1) {
						return true;
					}
				}
			}

			return false;
		},
	};
%>

<%- include('../layout/head', { title: 'Content Report' }); %>

<% for (const [sectionName, filterFn] of Object.entries(sections)) {
	const sectionPolicies = policies.filter(filterFn); %>

	<% if (sectionPolicies.length > 0) { %>
		<details class="content-report__section">
			<summary class="content-report__section__summary"><%= sectionName %> (<%= sectionPolicies.length %>)</summary>
				<div class="content-report__section__content">
					<ul class="directory__list">
						<% sectionPolicies.forEach((policy) => {
							const policyIndex = Object.values(directory).indexOf(policy);
							const policyHref = Object.keys(directory)[policyIndex]; %>
							<li class="directory__item">
								<%- include('../components/policy-summary', { policy, paths, key: policyHref }); %>
							</li>
						<% }) %>
					</ul>
				</div>
		</details>
	<% } else { %>
		<span class="content-report__section__summary"><%= sectionName %> (<%= sectionPolicies.length %>)</span>
	<% } %>
<% } %>

<%- include('../layout/foot'); %>
