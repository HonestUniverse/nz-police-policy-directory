<%##
	locals: {
		policy: Policy,
		key: string,
	}
%>

<section
	class="policy-summary<%= policy.versions.length === 0 ? ' policy-summary--stub' : '' %> js-search__item"
	data-search-name="<%= policy.name %>"
	data-search-type="<%= policy.type %>"
	data-search-stub="<%= policy.versions.length === 0 %>"
	<% if (policy.previousNames) {
		const previousNamesList = policy.previousNames ? JSON.stringify(policy.previousNames).replace(/"/g, '&quot;') : null; %>
		data-search-previous-names="<%= previousNamesList %>"
	<% } %>
>
	<h2 class="policy-summary__title">
		<a href="<%= key %>" class="policy-summary__link"><%= policy.name %><%= policy.obsolete ? ' (obsolete)' : '' %></a>
	</h2>

	<% if (policy.previousNames) { %>
		<div class="policy-summary__previous-names">
			<span class="policy-summary__previous-names__title">Previously called</span>
			<ul class="policy-summary__previous-names__list">
				<% for (const name of policy.previousNames) { %>
					<li class="policy-summary__previous-names__item"><%= name %></li>
				<% } %>
			</ul>
		</div>
	<% } %>

	<span class="policy-summary__type"><%= policy.type %></span>

	<% if (policy.versions.length > 0) { %>
		<%
			const latestVersion = policy.versions[0];
			const mainFile = policy.versions[0].files[0];

			const provenance = mainFile?.provenance || latestVersion.provenance;

			// From provenance objects with a `retrieved` date, create an array of retrieved dates and sort it from most recent to oldest
			const retrievedDates = provenance.filter((prov) => prov.retrieved).map((prov) => new Date(prov.retrieved)).sort();
		%>
		<% if (retrievedDates.length) { %>
			<span class="policy-summary__date">Last Updated: <%- include('../helpers/date-partial', { date: retrievedDates[0] }); %></span>
		<% } %>
	<% } else { %>
		<span class="policy-summary__stub-notice">No versions</span>
	<% } %>
</section>
